name: Deploy to AWS S3

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      auto_approve:
        description: 'Auto-approve Terraform changes'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      deployment_environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - 'development'
          - 'staging'
          - 'production'

env:
  AWS_REGION: us-east-1

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test HTML validity
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate HTML
      run: |
        sudo apt-get update
        sudo apt-get install -y tidy
        tidy -q -e index.html || echo "HTML validation completed"
    
    - name: Check for security issues
      run: |
        # Basic security check for potential XSS or injection vulnerabilities
        if grep -i "eval\|innerHTML\|document.write" index.html; then
          echo "Warning: Potential security issues found"
          exit 1
        fi
        echo "Basic security check passed"

  infrastructure:
    runs-on: ubuntu-latest
    name: Deploy Infrastructure
    needs: test
    if: github.ref == 'refs/heads/main'
    outputs:
      bucket-name: ${{ steps.terraform.outputs.bucket-name }}
      cloudfront-distribution-id: ${{ steps.terraform.outputs.cloudfront-distribution-id }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Create environment-specific naming
      id: environment-config
      run: |
        # Determine environment based on branch or manual input
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          ENVIRONMENT="${{ github.event.inputs.deployment_environment }}"
        else
          # Auto-determine environment based on branch
          case "${{ github.ref }}" in
            "refs/heads/main")
              ENVIRONMENT="prod"
              ;;
            "refs/heads/develop")
              ENVIRONMENT="test"
              ;;
            *)
              ENVIRONMENT="dev"
              ;;
          esac
        fi
        
        # Create environment-specific bucket name
        REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        BUCKET_NAME="hello-world-${ENVIRONMENT}-${REPO_OWNER_LOWER}"
        
        echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
        echo "bucket-name=${BUCKET_NAME}" >> $GITHUB_OUTPUT
        echo "terraform-workspace=hello-world-${ENVIRONMENT}" >> $GITHUB_OUTPUT
        
        echo "🌍 Environment: ${ENVIRONMENT}"
        echo "🪣 Bucket: ${BUCKET_NAME}"
        echo "🔧 Workspace: hello-world-${ENVIRONMENT}"
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
        terraform_wrapper: false
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
        
        # Create or select workspace for environment isolation
        terraform workspace select ${{ steps.environment-config.outputs.terraform-workspace }} || \
        terraform workspace new ${{ steps.environment-config.outputs.terraform-workspace }}
        
        echo "🔧 Using Terraform workspace: $(terraform workspace show)"
    
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan \
          -var="environment=${{ steps.environment-config.outputs.environment }}" \
          -var="bucket_name=${{ steps.environment-config.outputs.bucket-name }}"
    
    - name: Check Auto-Approve Setting
      run: |
        AUTO_APPROVE="${{ github.event.inputs.auto_approve }}"
        ENVIRONMENT="${{ steps.environment-config.outputs.environment }}"
        
        # Default to true for push events (not manual workflow_dispatch)
        if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
          # Only auto-approve dev and test environments from push
          if [ "$ENVIRONMENT" == "prod" ]; then
            AUTO_APPROVE="false"
          else
            AUTO_APPROVE="true"
          fi
        fi
        
        echo "Auto-approve: $AUTO_APPROVE"
        echo "Environment: $ENVIRONMENT"
        echo "auto_approve=$AUTO_APPROVE" >> $GITHUB_ENV
        echo "deployment_env=$ENVIRONMENT" >> $GITHUB_ENV
    
    - name: Terraform Apply
      id: terraform
      run: |
        cd terraform
        
        if [ "${{ env.auto_approve }}" == "true" ]; then
          echo "🚀 Auto-approving Terraform changes for ${{ env.deployment_env }} environment"
          terraform apply -auto-approve \
            -var="environment=${{ steps.environment-config.outputs.environment }}" \
            -var="bucket_name=${{ steps.environment-config.outputs.bucket-name }}"
        else
          echo "⚠️  Manual approval required for ${{ env.deployment_env }} environment"
          terraform plan -out=tfplan \
            -var="environment=${{ steps.environment-config.outputs.environment }}" \
            -var="bucket_name=${{ steps.environment-config.outputs.bucket-name }}"
          echo "❌ Deployment halted - manual approval required"
          echo "📋 Review the plan above and re-run with auto_approve=true if approved"
          exit 1
        fi
        
        echo "bucket-name=$(terraform output -raw bucket_name)" >> $GITHUB_OUTPUT
        echo "cloudfront-distribution-id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to S3
    needs: [test, infrastructure]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Optimize HTML (minify)
      run: |
        # Simple HTML minification using sed
        sed 's/^[[:space:]]*//' index.html | sed '/^$/d' > index.min.html
        mv index.min.html index.html
    
    - name: Deploy to S3
      run: |
        aws s3 sync . s3://${{ needs.infrastructure.outputs.bucket-name }} \
          --exclude ".git/*" \
          --exclude ".github/*" \
          --exclude "terraform/*" \
          --exclude "*.md" \
          --exclude ".gitignore" \
          --cache-control "public, max-age=86400"
    
    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ needs.infrastructure.outputs.cloudfront-distribution-id }} \
          --paths "/*"
    
    - name: Get website URL
      run: |
        echo "🚀 Website deployed successfully!"
        echo "📝 S3 Bucket: ${{ needs.infrastructure.outputs.bucket-name }}"
        echo "🌐 CloudFront URL: https://${{ needs.infrastructure.outputs.cloudfront-distribution-id }}.cloudfront.net"
        echo "📊 Check the Actions tab for deployment details"

  notify:
    runs-on: ubuntu-latest
    name: Notify Deployment Status
    needs: [test, infrastructure, deploy]
    if: always()
    steps:
    - name: Deployment Success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment completed successfully!"
        echo "🎉 Your Hello World app is now live on AWS!"
    
    - name: Deployment Failed
      if: needs.deploy.result == 'failure' || needs.infrastructure.result == 'failure'
      run: |
        echo "❌ Deployment failed. Check the logs above for details."
        exit 1