name: Deploy to AWS S3

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  S3_BUCKET_NAME: hello-world-${{ github.repository_owner }}-${{ github.run_number }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test HTML validity
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate HTML
      run: |
        sudo apt-get update
        sudo apt-get install -y tidy
        tidy -q -e index.html || echo "HTML validation completed"
    
    - name: Check for security issues
      run: |
        # Basic security check for potential XSS or injection vulnerabilities
        if grep -i "eval\|innerHTML\|document.write" index.html; then
          echo "Warning: Potential security issues found"
          exit 1
        fi
        echo "Basic security check passed"

  infrastructure:
    runs-on: ubuntu-latest
    name: Deploy Infrastructure
    needs: test
    if: github.ref == 'refs/heads/main'
    outputs:
      bucket-name: ${{ steps.terraform.outputs.bucket-name }}
      cloudfront-distribution-id: ${{ steps.terraform.outputs.cloudfront-distribution-id }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
        terraform_wrapper: false
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
    
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var="bucket_name=${{ env.S3_BUCKET_NAME }}"
    
    - name: Terraform Apply
      id: terraform
      run: |
        cd terraform
        terraform apply -auto-approve -var="bucket_name=${{ env.S3_BUCKET_NAME }}"
        echo "bucket-name=$(terraform output -raw bucket_name)" >> $GITHUB_OUTPUT
        echo "cloudfront-distribution-id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to S3
    needs: [test, infrastructure]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Optimize HTML (minify)
      run: |
        # Simple HTML minification using sed
        sed 's/^[[:space:]]*//' index.html | sed '/^$/d' > index.min.html
        mv index.min.html index.html
    
    - name: Deploy to S3
      run: |
        aws s3 sync . s3://${{ needs.infrastructure.outputs.bucket-name }} \
          --exclude ".git/*" \
          --exclude ".github/*" \
          --exclude "terraform/*" \
          --exclude "*.md" \
          --exclude ".gitignore" \
          --cache-control "public, max-age=86400"
    
    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ needs.infrastructure.outputs.cloudfront-distribution-id }} \
          --paths "/*"
    
    - name: Get website URL
      run: |
        echo "🚀 Website deployed successfully!"
        echo "📝 S3 Bucket: ${{ needs.infrastructure.outputs.bucket-name }}"
        echo "🌐 CloudFront URL: https://${{ needs.infrastructure.outputs.cloudfront-distribution-id }}.cloudfront.net"
        echo "📊 Check the Actions tab for deployment details"

  notify:
    runs-on: ubuntu-latest
    name: Notify Deployment Status
    needs: [test, infrastructure, deploy]
    if: always()
    steps:
    - name: Deployment Success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment completed successfully!"
        echo "🎉 Your Hello World app is now live on AWS!"
    
    - name: Deployment Failed
      if: needs.deploy.result == 'failure' || needs.infrastructure.result == 'failure'
      run: |
        echo "❌ Deployment failed. Check the logs above for details."
        exit 1